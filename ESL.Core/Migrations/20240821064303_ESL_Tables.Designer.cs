// <auto-generated />
using System;
using System.Collections.Generic;
using ESL.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ESL.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240821064303_ESL_Tables")]
    partial class ESL_Tables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("ESL.Core.Models.AllEvent", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LogTypeNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventID")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventID_RevNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClearanceID")
                        .HasColumnType("TEXT")
                        .HasColumnName("ClearanceID");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Details");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("EventDate");

                    b.Property<string>("EventTime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("EventTime");

                    b.Property<string>("ModifyFlag")
                        .HasColumnType("TEXT")
                        .HasColumnName("ModifyFlag");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<string>("OperatorType")
                        .HasColumnType("TEXT")
                        .HasColumnName("OperatorType");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Subject");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FacilNo", "LogTypeNo", "EventID", "EventID_RevNo");

                    b.HasIndex("LogTypeNo");

                    b.ToTable("ESL_AllEvents");
                });

            modelBuilder.Entity("ESL.Core.Models.ClearanceIssue", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LogTypeNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventID")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventID_RevNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClearanceID")
                        .HasColumnType("TEXT")
                        .HasColumnName("ClearanceID");

                    b.Property<string>("ClearanceType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ClearanceType");

                    b.Property<string>("ClearanceZone")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ClearanceZone");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("EquipmentInvolved")
                        .HasColumnType("TEXT")
                        .HasColumnName("EquipmentInvolved");

                    b.Property<string>("FacilAbbr")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FacilAbbr");

                    b.Property<int>("IssuedBy")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IssuedBy");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("IssuedDate");

                    b.Property<string>("IssuedTime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("IssuedTime");

                    b.Property<int>("IssuedTo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IssuedTo");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT")
                        .HasColumnName("Location");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("ModifyFlag")
                        .HasColumnType("TEXT")
                        .HasColumnName("ModifyFlag");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<string>("NotifiedFacil")
                        .HasColumnType("TEXT")
                        .HasColumnName("NotifiedFacil");

                    b.Property<int?>("NotifiedPerson")
                        .HasColumnType("INTEGER")
                        .HasColumnName("NotifiedPerson");

                    b.Property<int>("OperatorID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OperatorID");

                    b.Property<string>("OperatorType")
                        .HasColumnType("TEXT")
                        .HasColumnName("OperatorType");

                    b.Property<string>("RelatedTo")
                        .HasColumnType("TEXT")
                        .HasColumnName("RelatedTo");

                    b.Property<string>("ReleaseType")
                        .HasColumnType("TEXT")
                        .HasColumnName("ReleaseType");

                    b.Property<int?>("ReleasedBy")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ReleasedBy");

                    b.Property<DateTime?>("ReleasedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("ReleasedDate");

                    b.Property<string>("ReleasedTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("ReleasedTime");

                    b.Property<int?>("ReleasedTo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ReleasedTo");

                    b.Property<int>("SeqNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SeqNo");

                    b.Property<int?>("ShiftNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ShiftNo");

                    b.Property<string>("TagsRemoved")
                        .HasColumnType("TEXT")
                        .HasColumnName("TagsRemoved");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrders")
                        .HasColumnType("TEXT")
                        .HasColumnName("WorkOrders");

                    b.Property<string>("WorkToBePerformed")
                        .HasColumnType("TEXT")
                        .HasColumnName("WorkToBePerformed");

                    b.Property<string>("Yr")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Yr");

                    b.HasKey("FacilNo", "LogTypeNo", "EventID", "EventID_RevNo");

                    b.ToTable("ESL_ClearanceIssues");
                });

            modelBuilder.Entity("ESL.Core.Models.ClearanceType", b =>
                {
                    b.Property<int>("ClearanceTypeNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClearanceTypeAbbr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClearanceTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("SortNo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClearanceTypeNo");

                    b.ToTable("ESL_ClearanceTypes");
                });

            modelBuilder.Entity("ESL.Core.Models.ClearanceZone", b =>
                {
                    b.Property<string>("FacilType")
                        .HasColumnType("TEXT");

                    b.Property<int>("ZoneNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Disable")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SortNo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ZoneDescription")
                        .HasColumnType("TEXT");

                    b.HasKey("FacilType", "ZoneNo");

                    b.ToTable("ESL_ClearanceZones");
                });

            modelBuilder.Entity("ESL.Core.Models.Constant", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConstantName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("FacilNo", "ConstantName", "StartDate");

                    b.ToTable("ESL_Constants");
                });

            modelBuilder.Entity("ESL.Core.Models.Details", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FacilNo")
                        .HasColumnOrder(0);

                    b.Property<int>("DetailsNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DetailsNo")
                        .HasColumnOrder(1);

                    b.Property<string>("DetailsName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("DetailsName");

                    b.Property<string>("Disable")
                        .HasColumnType("TEXT")
                        .HasColumnName("Disabled?");

                    b.Property<string>("FacilType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FacilType");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<int?>("SortNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SortNo");

                    b.Property<int>("SubjectFacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SubjectNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SubjNo");

                    b.Property<int>("SubjectNo1")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("FacilNo", "DetailsNo");

                    b.HasIndex("SubjectFacilNo", "SubjectNo1");

                    b.ToTable("ESL_Details");
                });

            modelBuilder.Entity("ESL.Core.Models.EOS", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LogTypeNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventID")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventID_RevNo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("EquipmentInvolved")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("EquipmentInvolved");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Location");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("ModifyFlag")
                        .HasColumnType("TEXT")
                        .HasColumnName("ModifyFlag");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<string>("NotifiedFacil")
                        .HasColumnType("TEXT")
                        .HasColumnName("NotifiedFacil");

                    b.Property<int?>("NotifiedPerson")
                        .HasColumnType("INTEGER")
                        .HasColumnName("NotifiedPerson");

                    b.Property<int>("OperatorID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OperatorID");

                    b.Property<string>("OperatorType")
                        .HasColumnType("TEXT")
                        .HasColumnName("OperatorType");

                    b.Property<string>("RelatedTo")
                        .HasColumnType("TEXT")
                        .HasColumnName("RelatedTo");

                    b.Property<string>("ReleaseType")
                        .HasColumnType("TEXT")
                        .HasColumnName("ReleaseType");

                    b.Property<int?>("ReleasedBy")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ReleasedBy");

                    b.Property<DateTime?>("ReleasedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("ReleasedDate");

                    b.Property<string>("ReleasedTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("ReleasedTime");

                    b.Property<int?>("ReportedBy")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ReportedBy");

                    b.Property<DateTime?>("ReportedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("ReportedDate");

                    b.Property<string>("ReportedTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("ReportedTime");

                    b.Property<int?>("ReportedTo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ReportedTo");

                    b.Property<int>("SeqNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SeqNo");

                    b.Property<int?>("ShiftNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ShiftNo");

                    b.Property<string>("TagsInstalled")
                        .HasColumnType("TEXT")
                        .HasColumnName("TagsInstalled");

                    b.Property<string>("TagsRemoved")
                        .HasColumnType("TEXT")
                        .HasColumnName("TagsRemoved");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrders")
                        .HasColumnType("TEXT")
                        .HasColumnName("WorkOrders");

                    b.Property<string>("Yr")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Yr");

                    b.HasKey("FacilNo", "LogTypeNo", "EventID", "EventID_RevNo");

                    b.ToTable("ESL_EOS");
                });

            modelBuilder.Entity("ESL.Core.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("EmployeeNo");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Company");

                    b.Property<string>("Disable")
                        .HasColumnType("TEXT")
                        .HasColumnName("Disable");

                    b.Property<int?>("FacilNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FacilNo");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FirstName");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("GroupName");

                    b.Property<string>("JobTitle")
                        .HasColumnType("TEXT")
                        .HasColumnName("JobTitle");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("LastName");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeNo");

                    b.ToTable("ESL_Employees");
                });

            modelBuilder.Entity("ESL.Core.Models.EquipmentInvolved", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FacilNo");

                    b.Property<int>("EquipNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EquipNo");

                    b.Property<string>("Disable")
                        .HasColumnType("TEXT")
                        .HasColumnName("Disable");

                    b.Property<string>("EquipName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("EquipName");

                    b.Property<string>("FacilType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FacilNo", "EquipNo");

                    b.ToTable("ESL_EquipmentInvolved");
                });

            modelBuilder.Entity("ESL.Core.Models.Facility", b =>
                {
                    b.Property<int>("FacilNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("FacilNo");

                    b.Property<string>("Disable")
                        .HasColumnType("TEXT")
                        .HasColumnName("Disable");

                    b.Property<string>("FacilAbbr")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FacilAbbr");

                    b.Property<string>("FacilFullName")
                        .HasColumnType("TEXT")
                        .HasColumnName("FacilFullName");

                    b.Property<string>("FacilName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FacilName");

                    b.Property<string>("FacilType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FacilType");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<int?>("SortNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SortNo");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VisibleTo")
                        .HasColumnType("TEXT")
                        .HasColumnName("VisibleTo");

                    b.HasKey("FacilNo");

                    b.ToTable("ESL_Facilities");
                });

            modelBuilder.Entity("ESL.Core.Models.FlowChange", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LogTypeNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventID")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventID_RevNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Accepted")
                        .HasColumnType("TEXT")
                        .HasColumnName("Accepted");

                    b.Property<string>("ChangeBy")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ChangeBy");

                    b.Property<string>("ChangeByUnit")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ChangeByUnit");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("EventDate");

                    b.Property<string>("EventTime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("EventTime");

                    b.Property<string>("MeterID")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("MeterID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("ModifyFlag")
                        .HasColumnType("TEXT")
                        .HasColumnName("ModifyFlag");

                    b.Property<decimal?>("NewValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("NewValue");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<string>("NotifiedFacil")
                        .HasColumnType("TEXT")
                        .HasColumnName("NotifiedFacil");

                    b.Property<int?>("NotifiedPerson")
                        .HasColumnType("INTEGER")
                        .HasColumnName("NotifiedPerson");

                    b.Property<string>("OffTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("OffTime");

                    b.Property<string>("OldUnit")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("OldUnit");

                    b.Property<decimal?>("OldValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("OldValue");

                    b.Property<int>("OperatorID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OperatorID");

                    b.Property<string>("OperatorType")
                        .HasColumnType("TEXT")
                        .HasColumnName("OperatorType");

                    b.Property<string>("RelatedTo")
                        .HasColumnType("TEXT")
                        .HasColumnName("RelatedTo");

                    b.Property<int?>("RequestedBy")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RequestedBy");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("RequestedDate");

                    b.Property<string>("RequestedTime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("RequestedTime");

                    b.Property<int>("RequestedTo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RequestedTo");

                    b.Property<int>("SeqNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SeqNo");

                    b.Property<int?>("ShiftNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ShiftNo");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT")
                        .HasColumnName("Unit");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrders")
                        .HasColumnType("TEXT")
                        .HasColumnName("WorkOrders");

                    b.Property<string>("Yr")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Yr");

                    b.HasKey("FacilNo", "LogTypeNo", "EventID", "EventID_RevNo");

                    b.ToTable("ESL_FlowChanges");
                });

            modelBuilder.Entity("ESL.Core.Models.GeneralLog", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LogTypeNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventID")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventID_RevNo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT")
                        .HasColumnName("Details");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("EventDate");

                    b.Property<string>("EventTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("EventTime");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT")
                        .HasColumnName("Location");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("ModifyFlag")
                        .HasColumnType("TEXT")
                        .HasColumnName("ModifyFlag");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<string>("NotifiedFacil")
                        .HasColumnType("TEXT")
                        .HasColumnName("NotifiedFacil");

                    b.Property<int?>("NotifiedPerson")
                        .HasColumnType("INTEGER")
                        .HasColumnName("NotifiedPerson");

                    b.Property<int>("OperatorID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OperatorID");

                    b.Property<string>("OperatorType")
                        .HasColumnType("TEXT")
                        .HasColumnName("OperatorType");

                    b.Property<string>("RelatedTo")
                        .HasColumnType("TEXT")
                        .HasColumnName("RelatedTo");

                    b.Property<int?>("ReportedBy")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ReportedBy");

                    b.Property<int>("SeqNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SeqNo");

                    b.Property<int?>("ShiftNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ShiftNo");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Subject");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkOrders")
                        .HasColumnType("TEXT")
                        .HasColumnName("WorkOrders");

                    b.Property<string>("Yr")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Yr");

                    b.HasKey("FacilNo", "LogTypeNo", "EventID", "EventID_RevNo");

                    b.ToTable("ESL_General");
                });

            modelBuilder.Entity("ESL.Core.Models.LogType", b =>
                {
                    b.Property<int>("LogTypeNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LogTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LogTypeNo");

                    b.ToTable("ESL_LogTypes");
                });

            modelBuilder.Entity("ESL.Core.Models.Meter", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FacilNo");

                    b.Property<string>("MeterID")
                        .HasColumnType("TEXT")
                        .HasColumnName("MeterID");

                    b.Property<string>("Disable")
                        .HasColumnType("TEXT")
                        .HasColumnName("Disabled?");

                    b.Property<string>("MeterType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("MeterType");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<int?>("SortNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SortNo");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FacilNo", "MeterID");

                    b.ToTable("ESL_Meters");
                });

            modelBuilder.Entity("ESL.Core.Models.PlantShift", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShiftNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShiftEnd")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShiftName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShiftStart")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FacilNo", "ShiftNo");

                    b.ToTable("ESL_PlantShifts");
                });

            modelBuilder.Entity("ESL.Core.Models.RelatedTo", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LogTypeNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventID")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelatedTo_Subject")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FacilNo", "LogTypeNo", "EventID", "RelatedTo_Subject");

                    b.ToTable("ESL_RelatedTo");
                });

            modelBuilder.Entity("ESL.Core.Models.SOC", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LogTypeNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventID")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventID_RevNo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedDate");

                    b.Property<string>("EquipmentInvolved")
                        .HasColumnType("TEXT")
                        .HasColumnName("EquipmentInvolved");

                    b.Property<string>("FacilAbbr")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FacilAbbr");

                    b.Property<string>("Limitations")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Limitations");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Location");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("ModifiedDate");

                    b.Property<string>("ModifyFlag")
                        .HasColumnType("TEXT")
                        .HasColumnName("ModifyFlag");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<string>("NotifiedFacil")
                        .HasColumnType("TEXT")
                        .HasColumnName("NotifiedFacil");

                    b.Property<int>("NotifiedFacilityFacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NotifiedPerson")
                        .HasColumnType("INTEGER")
                        .HasColumnName("NotifiedPerson");

                    b.Property<int>("OperatorID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OperatorID");

                    b.Property<string>("OperatorType")
                        .HasColumnType("TEXT")
                        .HasColumnName("OperatorType");

                    b.Property<string>("RelatedTo")
                        .HasColumnType("TEXT")
                        .HasColumnName("RelatedTo");

                    b.Property<string>("ReleaseType")
                        .HasColumnType("TEXT")
                        .HasColumnName("ReleaseType");

                    b.Property<int?>("ReleasedBy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReleasedBy_EmployeeEmployeeNo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReleasedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("ReleasedDate");

                    b.Property<string>("ReleasedTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("ReleasedTime");

                    b.Property<int?>("ReleasedTo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ReleasedTo");

                    b.Property<int>("ReleasedTo_EmployeeEmployeeNo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReportedBy")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ReportedBy");

                    b.Property<int>("ReportedBy_EmployeeEmployeeNo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReportedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("ReportedDate");

                    b.Property<string>("ReportedTime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ReportedTime");

                    b.Property<int?>("ReportedTo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ReportedTo");

                    b.Property<int>("ReportedTo_EmployeeEmployeeNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeqNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SeqNo");

                    b.Property<int?>("ShiftNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ShiftNo");

                    b.Property<string>("TagsInstalled")
                        .HasColumnType("TEXT")
                        .HasColumnName("TagsInstalled");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UpdatedBy_EmployeeEmployeeNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkOrders")
                        .HasColumnType("TEXT")
                        .HasColumnName("WorkOrders");

                    b.Property<string>("Yr")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Yr");

                    b.HasKey("FacilNo", "LogTypeNo", "EventID", "EventID_RevNo");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LogTypeNo");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("NotifiedFacilityFacilNo");

                    b.HasIndex("NotifiedPerson");

                    b.HasIndex("OperatorID");

                    b.HasIndex("ReleasedBy_EmployeeEmployeeNo");

                    b.HasIndex("ReleasedTo_EmployeeEmployeeNo");

                    b.HasIndex("ReportedBy_EmployeeEmployeeNo");

                    b.HasIndex("ReportedTo_EmployeeEmployeeNo");

                    b.HasIndex("UpdatedBy_EmployeeEmployeeNo");

                    b.ToTable("ESL_SOC");
                });

            modelBuilder.Entity("ESL.Core.Models.ScanDoc", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LogTypeNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventID")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ScanNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScanFileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FacilNo", "LogTypeNo", "EventID", "ScanNo");

                    b.ToTable("ESL_ScanDocs");
                });

            modelBuilder.Entity("ESL.Core.Models.ScanLob", b =>
                {
                    b.Property<int>("ScanSeqNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ScanSeqNo");

                    b.Property<byte[]>("Blob")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("ScanLob");

                    b.Property<string>("EventID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FacilNo");

                    b.Property<int>("LogTypeNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScanLobType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ScanNo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ScanSeqNo");

                    b.HasIndex(new[] { "FacilNo", "LogTypeNo", "EventID", "ScanNo" }, "SCANLOB_DOC_IDX")
                        .IsUnique();

                    b.ToTable("ESL_ScanLobs");
                });

            modelBuilder.Entity("ESL.Core.Models.Subject", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FacilNo");

                    b.Property<int>("SubjectNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SubjNo");

                    b.Property<string>("Disable")
                        .HasColumnType("TEXT")
                        .HasColumnName("Disable");

                    b.Property<string>("FacilType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FacilType");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<int?>("SortNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SortNo");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("SubjName");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FacilNo", "SubjectNo");

                    b.ToTable("ESL_Subjects");
                });

            modelBuilder.Entity("ESL.Core.Models.Unit", b =>
                {
                    b.Property<int>("UnitNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UnitNo");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<string>("UnitDesc")
                        .HasColumnType("TEXT")
                        .HasColumnName("UnitDesc");

                    b.Property<string>("UnitName")
                        .HasColumnType("TEXT")
                        .HasColumnName("UnitName");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UnitNo");

                    b.ToTable("ESL_Units");
                });

            modelBuilder.Entity("ESL.Core.Models.User", b =>
                {
                    b.Property<int>("EmployeeNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("EmployeeNo");

                    b.Property<int?>("FacilNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FacilNo");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT")
                        .HasColumnName("LastName");

                    b.Property<string>("PrincipalName")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT")
                        .HasColumnName("PrincipalName");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("TEXT")
                        .HasColumnName("UserGuid");

                    b.ComplexProperty<Dictionary<string, object>>("UserInfo", "ESL.Core.Models.User.UserInfo#UserInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("EmployeeNo")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("INTEGER")
                                .HasColumnName("EmployeeNo");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("LastName");

                            b1.Property<string>("PrincipalName")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("PrincipalName");
                        });

                    b.HasKey("EmployeeNo");

                    b.ToTable("ESL_Users");
                });

            modelBuilder.Entity("ESL.Core.Models.WorkOrder", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FacilNo");

                    b.Property<int>("LogTypeNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LogTypeNo");

                    b.Property<string>("EventID")
                        .HasColumnType("TEXT")
                        .HasColumnName("EventID");

                    b.Property<string>("WO_No")
                        .HasColumnType("TEXT")
                        .HasColumnName("WO_No");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FacilNo", "LogTypeNo", "EventID", "WO_No");

                    b.ToTable("ESL_WorkOrders");
                });

            modelBuilder.Entity("ESL.Core.Models.WorkToBePerformed", b =>
                {
                    b.Property<string>("FacilType")
                        .HasColumnType("TEXT")
                        .HasColumnName("FacilType");

                    b.Property<int>("WorkNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("WorkNo");

                    b.Property<string>("Disable")
                        .HasColumnType("TEXT")
                        .HasColumnName("Disable");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<int?>("SortNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SortNo");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkDescription")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("WorkDescription");

                    b.HasKey("FacilType", "WorkNo");

                    b.ToTable("ESL_WorkToBePerformed");
                });

            modelBuilder.Entity("ESL.Core.Models.AllEvent", b =>
                {
                    b.HasOne("ESL.Core.Models.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESL.Core.Models.LogType", "LogType")
                        .WithMany()
                        .HasForeignKey("LogTypeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("LogType");
                });

            modelBuilder.Entity("ESL.Core.Models.Details", b =>
                {
                    b.HasOne("ESL.Core.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectFacilNo", "SubjectNo1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ESL.Core.Models.SOC", b =>
                {
                    b.HasOne("ESL.Core.Models.Employee", "CreatedBy_Employee")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("ESL.Core.Models.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESL.Core.Models.LogType", "LogType")
                        .WithMany()
                        .HasForeignKey("LogTypeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESL.Core.Models.Employee", "ModifiedBy_Employee")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("ESL.Core.Models.Facility", "NotifiedFacility")
                        .WithMany()
                        .HasForeignKey("NotifiedFacilityFacilNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESL.Core.Models.Employee", "NotifiedPerson_Employee")
                        .WithMany()
                        .HasForeignKey("NotifiedPerson");

                    b.HasOne("ESL.Core.Models.Employee", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESL.Core.Models.Employee", "ReleasedBy_Employee")
                        .WithMany()
                        .HasForeignKey("ReleasedBy_EmployeeEmployeeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESL.Core.Models.Employee", "ReleasedTo_Employee")
                        .WithMany()
                        .HasForeignKey("ReleasedTo_EmployeeEmployeeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESL.Core.Models.Employee", "ReportedBy_Employee")
                        .WithMany()
                        .HasForeignKey("ReportedBy_EmployeeEmployeeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESL.Core.Models.Employee", "ReportedTo_Employee")
                        .WithMany()
                        .HasForeignKey("ReportedTo_EmployeeEmployeeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESL.Core.Models.Employee", "UpdatedBy_Employee")
                        .WithMany()
                        .HasForeignKey("UpdatedBy_EmployeeEmployeeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy_Employee");

                    b.Navigation("Facility");

                    b.Navigation("LogType");

                    b.Navigation("ModifiedBy_Employee");

                    b.Navigation("NotifiedFacility");

                    b.Navigation("NotifiedPerson_Employee");

                    b.Navigation("Operator");

                    b.Navigation("ReleasedBy_Employee");

                    b.Navigation("ReleasedTo_Employee");

                    b.Navigation("ReportedBy_Employee");

                    b.Navigation("ReportedTo_Employee");

                    b.Navigation("UpdatedBy_Employee");
                });
#pragma warning restore 612, 618
        }
    }
}
