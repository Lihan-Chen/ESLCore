// <auto-generated />
using System;
using System.Collections.Generic;
using ESL.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ESL.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240820085329_ScanDocPrimaryKey")]
    partial class ScanDocPrimaryKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("ESL.Core.Models.AllEvent", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LogTypeNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventID")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventID_RevNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClearanceID")
                        .HasColumnType("TEXT")
                        .HasColumnName("ClearanceID");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Details");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("EventDate");

                    b.Property<string>("EventTime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("EventTime");

                    b.Property<string>("ModifyFlag")
                        .HasColumnType("TEXT")
                        .HasColumnName("ModifyFlag");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<string>("OperatorType")
                        .HasColumnType("TEXT")
                        .HasColumnName("OperatorType");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Subject");

                    b.ComplexProperty<Dictionary<string, object>>("EventIdentity", "ESL.Core.Models.AllEvent.EventIdentity#EventIdentity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("EventID")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("EventID_RevNo")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("FacilNo")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("LogTypeNo")
                                .HasColumnType("INTEGER");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Update", "ESL.Core.Models.AllEvent.Update#Update", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("UpdateDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("FacilNo", "LogTypeNo", "EventID", "EventID_RevNo");

                    b.HasIndex("LogTypeNo");

                    b.ToTable("ESL_AllEvents");
                });

            modelBuilder.Entity("ESL.Core.Models.ClearanceType", b =>
                {
                    b.Property<int>("ClearanceTypeNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClearanceTypeAbbr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClearanceTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("SortNo")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("Update", "ESL.Core.Models.ClearanceType.Update#Update", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("UpdateDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("ClearanceTypeNo");

                    b.ToTable("ESL_ClearanceTypes");
                });

            modelBuilder.Entity("ESL.Core.Models.ClearanceZone", b =>
                {
                    b.Property<string>("FacilType")
                        .HasColumnType("TEXT");

                    b.Property<int>("ZoneNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Disable")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SortNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ZoneDescription")
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("Update", "ESL.Core.Models.ClearanceZone.Update#Update", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("UpdateDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("FacilType", "ZoneNo");

                    b.ToTable("ESL_ClearanceZones");
                });

            modelBuilder.Entity("ESL.Core.Models.Constant", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConstantName")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Value")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("Update", "ESL.Core.Models.Constant.Update#Update", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("UpdateDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("FacilNo", "ConstantName", "StartDate");

                    b.ToTable("ESL_Constants");
                });

            modelBuilder.Entity("ESL.Core.Models.Details", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FacilNo")
                        .HasColumnOrder(0);

                    b.Property<int>("DetailsNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DetailsNo")
                        .HasColumnOrder(1);

                    b.Property<string>("DetailsName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("DetailsName");

                    b.Property<string>("Disable")
                        .HasColumnType("TEXT")
                        .HasColumnName("Disable");

                    b.Property<string>("FacilType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FacilType");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<int?>("SortNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SortNo");

                    b.Property<int>("SubjectFacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SubjectNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SubjNo");

                    b.Property<int>("SubjectNo1")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("Update", "ESL.Core.Models.Details.Update#Update", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("UpdateDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("FacilNo", "DetailsNo");

                    b.HasIndex("SubjectFacilNo", "SubjectNo1");

                    b.ToTable("ESL_Details");
                });

            modelBuilder.Entity("ESL.Core.Models.EquipmentInvolved", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FacilNo");

                    b.Property<int>("EquipNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EquipNo");

                    b.Property<string>("Disable")
                        .HasColumnType("TEXT")
                        .HasColumnName("Disable");

                    b.Property<string>("EquipName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("EquipName");

                    b.Property<string>("FacilType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.ComplexProperty<Dictionary<string, object>>("Update", "ESL.Core.Models.EquipmentInvolved.Update#Update", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("UpdateDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("FacilNo", "EquipNo");

                    b.ToTable("ESL_EquipmentInvolved");
                });

            modelBuilder.Entity("ESL.Core.Models.Facility", b =>
                {
                    b.Property<int>("FacilNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("FacilNo");

                    b.Property<string>("Disable")
                        .HasColumnType("TEXT")
                        .HasColumnName("Disable");

                    b.Property<string>("FacilAbbr")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FacilAbbr");

                    b.Property<string>("FacilFullName")
                        .HasColumnType("TEXT")
                        .HasColumnName("FacilFullName");

                    b.Property<string>("FacilName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FacilName");

                    b.Property<string>("FacilType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FacilType");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<int?>("SortNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SortNo");

                    b.Property<string>("VisibleTo")
                        .HasColumnType("TEXT")
                        .HasColumnName("VisibleTo");

                    b.ComplexProperty<Dictionary<string, object>>("Update", "ESL.Core.Models.Facility.Update#Update", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("UpdateDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("FacilNo");

                    b.ToTable("ESL_Facilities");
                });

            modelBuilder.Entity("ESL.Core.Models.LogType", b =>
                {
                    b.Property<int>("LogTypeNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LogTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("Update", "ESL.Core.Models.LogType.Update#Update", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("UpdateDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("LogTypeNo");

                    b.ToTable("LogTypes");
                });

            modelBuilder.Entity("ESL.Core.Models.Meter", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FacilNo");

                    b.Property<string>("MeterID")
                        .HasColumnType("TEXT")
                        .HasColumnName("MeterID");

                    b.Property<string>("Disable")
                        .HasColumnType("TEXT")
                        .HasColumnName("Disable");

                    b.Property<string>("MeterType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("MeterType");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<int?>("SortNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SortNo");

                    b.ComplexProperty<Dictionary<string, object>>("Update", "ESL.Core.Models.Meter.Update#Update", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("UpdateDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("FacilNo", "MeterID");

                    b.ToTable("ESL_Meters");
                });

            modelBuilder.Entity("ESL.Core.Models.PlantShift", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShiftNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShiftEnd")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShiftName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShiftStart")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("Update", "ESL.Core.Models.PlantShift.Update#Update", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("UpdateDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("FacilNo", "ShiftNo");

                    b.ToTable("PlantShift");
                });

            modelBuilder.Entity("ESL.Core.Models.RelatedTo", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LogTypeNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventID")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelatedTo_Subject")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("Update", "ESL.Core.Models.RelatedTo.Update#Update", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("UpdateDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("FacilNo", "LogTypeNo", "EventID", "RelatedTo_Subject");

                    b.ToTable("ESL_RelatedTo");
                });

            modelBuilder.Entity("ESL.Core.Models.ScanDoc", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LogTypeNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventID")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ScanNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScanFileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("Update", "ESL.Core.Models.ScanDoc.Update#Update", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("UpdateDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("FacilNo", "LogTypeNo", "EventID", "ScanNo");

                    b.ToTable("ESL_ScanDocs");
                });

            modelBuilder.Entity("ESL.Core.Models.ScanLob", b =>
                {
                    b.Property<int>("ScanLobNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Blob")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("EventID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LogTypeNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScanFileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ScanLobType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ScanNo")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("Update", "ESL.Core.Models.ScanLob.Update#Update", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("UpdateDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("ScanLobNo");

                    b.ToTable("ESL_ScanLobs");
                });

            modelBuilder.Entity("ESL.Core.Models.Subject", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FacilNo");

                    b.Property<int>("SubjectNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SubjNo");

                    b.Property<string>("Disable")
                        .HasColumnType("TEXT")
                        .HasColumnName("Disable");

                    b.Property<string>("FacilType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FacilType");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<int?>("SortNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SortNo");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("SubjName");

                    b.ComplexProperty<Dictionary<string, object>>("Update", "ESL.Core.Models.Subject.Update#Update", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("UpdateDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("FacilNo", "SubjectNo");

                    b.ToTable("ESL_Subjects");
                });

            modelBuilder.Entity("ESL.Core.Models.Unit", b =>
                {
                    b.Property<int>("UnitNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UnitNo");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<string>("UnitDesc")
                        .HasColumnType("TEXT")
                        .HasColumnName("UnitDesc");

                    b.Property<string>("UnitName")
                        .HasColumnType("TEXT")
                        .HasColumnName("UnitName");

                    b.ComplexProperty<Dictionary<string, object>>("Update", "ESL.Core.Models.Unit.Update#Update", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("UpdateDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("UnitNo");

                    b.ToTable("ESL_Units");
                });

            modelBuilder.Entity("ESL.Core.Models.User", b =>
                {
                    b.Property<int>("EmployeeNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("EmployeeNo");

                    b.Property<int?>("FacilNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FacilNo");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT")
                        .HasColumnName("LastName");

                    b.Property<string>("PrincipalName")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("TEXT")
                        .HasColumnName("PrincipalName");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("TEXT")
                        .HasColumnName("UserGuid");

                    b.ComplexProperty<Dictionary<string, object>>("UserInfo", "ESL.Core.Models.User.UserInfo#UserInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("EmployeeNo")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("INTEGER")
                                .HasColumnName("EmployeeNo");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("LastName");

                            b1.Property<string>("PrincipalName")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("TEXT")
                                .HasColumnName("PrincipalName");
                        });

                    b.HasKey("EmployeeNo");

                    b.ToTable("ESL_Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ESL.Core.Models.WorkOrder", b =>
                {
                    b.Property<int>("FacilNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FacilNo");

                    b.Property<int>("LogTypeNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LogTypeNo");

                    b.Property<string>("EventID")
                        .HasColumnType("TEXT")
                        .HasColumnName("EventID");

                    b.Property<string>("WO_No")
                        .HasColumnType("TEXT")
                        .HasColumnName("WO_No");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.ComplexProperty<Dictionary<string, object>>("Update", "ESL.Core.Models.WorkOrder.Update#Update", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("UpdateDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("FacilNo", "LogTypeNo", "EventID", "WO_No");

                    b.ToTable("ESL_WorkOrders");
                });

            modelBuilder.Entity("ESL.Core.Models.WorkToBePerformed", b =>
                {
                    b.Property<string>("FacilType")
                        .HasColumnType("TEXT")
                        .HasColumnName("FacilType");

                    b.Property<int>("WorkNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("WorkNo");

                    b.Property<string>("Disable")
                        .HasColumnType("TEXT")
                        .HasColumnName("Disable");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<int?>("SortNo")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SortNo");

                    b.Property<string>("WorkDescription")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("WorkDescription");

                    b.ComplexProperty<Dictionary<string, object>>("Update", "ESL.Core.Models.WorkToBePerformed.Update#Update", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("UpdateDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("FacilType", "WorkNo");

                    b.ToTable("ESL_WorkToBePerformed");
                });

            modelBuilder.Entity("ESL.Core.Models.Employee", b =>
                {
                    b.HasBaseType("ESL.Core.Models.User");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Company");

                    b.Property<string>("Disable")
                        .HasColumnType("TEXT")
                        .HasColumnName("Disable");

                    b.Property<int>("FacilityFacilNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("GroupName");

                    b.Property<string>("JobTitle")
                        .HasColumnType("TEXT")
                        .HasColumnName("JobTitle");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasColumnName("Notes");

                    b.Property<int>("UserEmployeeNo")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("Update", "ESL.Core.Models.Employee.Update#Update", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("UpdateDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("UpdatedBy")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasIndex("FacilityFacilNo");

                    b.HasIndex("UserEmployeeNo");

                    b.ToTable("ESL_Employees");
                });

            modelBuilder.Entity("ESL.Core.Models.AllEvent", b =>
                {
                    b.HasOne("ESL.Core.Models.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESL.Core.Models.LogType", "LogType")
                        .WithMany()
                        .HasForeignKey("LogTypeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("LogType");
                });

            modelBuilder.Entity("ESL.Core.Models.Details", b =>
                {
                    b.HasOne("ESL.Core.Models.Subject", "Subject")
                        .WithMany("DetailsList")
                        .HasForeignKey("SubjectFacilNo", "SubjectNo1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ESL.Core.Models.Employee", b =>
                {
                    b.HasOne("ESL.Core.Models.User", null)
                        .WithOne()
                        .HasForeignKey("ESL.Core.Models.Employee", "EmployeeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESL.Core.Models.Facility", "Facility")
                        .WithMany("EmployeeList")
                        .HasForeignKey("FacilityFacilNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESL.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserEmployeeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ESL.Core.Models.Facility", b =>
                {
                    b.Navigation("EmployeeList");
                });

            modelBuilder.Entity("ESL.Core.Models.Subject", b =>
                {
                    b.Navigation("DetailsList");
                });
#pragma warning restore 612, 618
        }
    }
}
